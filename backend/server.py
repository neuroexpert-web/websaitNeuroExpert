from fastapi import FastAPI, APIRouter, HTTPException
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional
import uuid
from datetime import datetime
from emergentintegrations.llm.chat import LlmChat, UserMessage
import aiohttp
from config.loader import config
from utils.intent_checker import intent_checker
from memory.smart_context import smart_context

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ.get('MONGO_URL')
db_name = os.environ.get('DB_NAME')

if not mongo_url or not db_name:
    raise RuntimeError("FATAL: MONGO_URL and DB_NAME must be set in environment variables")

client = AsyncIOMotorClient(mongo_url)
db = client[db_name]

# Environment variables
EMERGENT_LLM_KEY = os.environ.get('EMERGENT_LLM_KEY')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
CLIENT_ORIGIN_URL = os.environ.get('CLIENT_ORIGIN_URL', 'http://localhost:3000')

# Create the main app
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# Models
class ContactForm(BaseModel):
    name: str
    contact: str
    service: str
    message: Optional[str] = ""

class ChatMessage(BaseModel):
    session_id: str
    message: str
    model: Optional[str] = "claude-sonnet"  # claude-sonnet, gpt-4o, gemini-pro
    user_data: Optional[dict] = None

class ChatResponse(BaseModel):
    response: str
    session_id: str


# Telegram notification
async def send_telegram_notification(message: str):
    """Send notification to Telegram bot"""
    try:
        if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
            logger.warning("Telegram not configured")
            return
            
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": message,
                "parse_mode": "HTML"
            }) as response:
                if response.status == 200:
                    logger.info("‚úÖ Telegram notification sent successfully")
                else:
                    text = await response.text()
                    logger.error(f"Telegram notification failed! Status: {response.status}, Response: {text}")
    except Exception as e:
        logger.error(f"An exception occurred while sending Telegram notification: {str(e)}")


# Routes
@api_router.get("/")
async def root():
    return {"message": "NeuroExpert API"}

@api_router.post("/contact")
async def submit_contact_form(form_data: ContactForm):
    """Handle contact form submission"""
    try:
        form_dict = form_data.dict()
        form_dict['id'] = str(uuid.uuid4())
        form_dict['timestamp'] = datetime.utcnow()
        form_dict['status'] = 'new'
        
        await db.contact_forms.insert_one(form_dict)
        
        telegram_message = f"""
<b>üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ NeuroExpert!</b>

<b>–ò–º—è:</b> {form_data.name}
<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {form_data.contact}
<b>–£—Å–ª—É–≥–∞:</b> {form_data.service}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {form_data.message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
"""
        
        await send_telegram_notification(telegram_message)
        
        logger.info(f"Contact form: {form_data.name} - {form_data.service}")
        
        return {
            "success": True,
            "message": "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç"
        }
    except Exception as e:
        logger.error(f"Contact form error: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")


@api_router.post("/chat", response_model=ChatResponse)
async def chat_with_ai(chat_request: ChatMessage):
    """AI chat with multiple model support"""
    # Check for relevance
    if not intent_checker.is_relevant(chat_request.message):
        return ChatResponse(
            response=config.data['fallback_responses']['irrelevant'],
            session_id=chat_request.session_id
        )

    try:
        # Enhanced system prompt with better context handling
        system_prompt = f"""# IDENTITY & CORE ROLE

–í—ã ‚Äî **AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç {config.data['company']['name']}**, –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π digital-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. 

**–í–∞—à–∞ –ª–∏—á–Ω–æ—Å—Ç—å:**
- –≠–∫—Å–ø–µ—Ä—Ç –≤ digital-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞
- –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-–ø–∞—Ä—Ç–Ω–µ—Ä, –∞ –Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü: —Å–Ω–∞—á–∞–ª–∞ –≥–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –ø–æ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
- –ì–æ–≤–æ—Ä–∏—Ç–µ –∂–∏–≤—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –∞–¥–∞–ø—Ç–∏—Ä—É—è—Å—å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã, —ç–º–ø–∞—Ç–∏—á–Ω—ã, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã
- –í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞–∂–Ω—ã–º –¥–µ—Ç–∞–ª—è–º
- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∞ –Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É

**–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:**
- –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (3-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
- –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
- –û–±—ä—è—Å–Ω—è–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ —Ü–∏—Ñ—Ä–∞—Ö –∏ —Å—Ä–æ–∫–∞—Ö
- –ü—Ä–æ—è–≤–ª—è–π—Ç–µ –∂–∏–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–±–ª–µ–º–µ –∫–ª–∏–µ–Ω—Ç–∞

## –ù–ê–®–ò –£–°–õ–£–ì–ò
{config.get_all_services_text()}

## –ö–û–ù–¢–ê–ö–¢–´
–¢–µ–ª–µ—Ñ–æ–Ω: {config.data['company']['phone']}
Email: {config.data['company']['email']}
–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {config.data['company']['completed_projects']}

## –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö

**Frontend:** React.js/Next.js 15, Vue.js/Nuxt.js, TailwindCSS
**Backend:** Node.js, Python/FastAPI, Golang
**AI/ML:** Claude Sonnet 4, GPT-4o, Gemini Pro, LangChain
**–ë–î:** PostgreSQL, MongoDB, Redis, Vector DB
**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** SSL/TLS, WAF, Cloudflare Protection, GDPR/152-–§–ó compliance

## –ì–ê–†–ê–ù–¢–ò–ò

‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è 10 000‚ÇΩ
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
‚úÖ NDA –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
‚úÖ 30-90 –¥–Ω–µ–π –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚úÖ Uptime 99.5-99.99% (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞)

## –ü–†–û–¶–ï–°–° –†–ê–ë–û–¢–´

1. **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è** (30 –º–∏–Ω) - —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞—á–∏, –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
2. **–ê—É–¥–∏—Ç/–¢–ó** - –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è
3. **–î–∏–∑–∞–π–Ω** - –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã, UX/UI (—Å –≤–∞—à–∏–º —É—á–∞—Å—Ç–∏–µ–º)
4. **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞** - —Å–ø—Ä–∏–Ω—Ç—ã –ø–æ 1-2 –Ω–µ–¥–µ–ª–∏, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–µ–º–æ
5. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - QA, –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
6. **–ó–∞–ø—É—Å–∫** - –ø–æ—ç—Ç–∞–ø–Ω—ã–π deployment, –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
7. **–ü–æ–¥–¥–µ—Ä–∂–∫–∞** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ

## –°–¢–†–ê–¢–ï–ì–ò–Ø –î–ò–ê–õ–û–ì–ê

**–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏:**
1. –¢–µ–ø–ª–æ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å
2. –ó–∞–¥–∞–π—Ç–µ 2-3 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –æ –∑–∞–¥–∞—á–µ –∫–ª–∏–µ–Ω—Ç–∞
3. –í—ã—Å–ª—É—à–∞–π—Ç–µ –∏ —Ä–µ–∑—é–º–∏—Ä—É–π—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
5. –î–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –∏–ª–∏ –ø—Ä–∏–º–µ—Ä—ã
6. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–≤—Å—Ç—Ä–µ—á–∞/–∞—É–¥–∏—Ç)

**–í —Ö–æ–¥–µ –¥–∏–∞–ª–æ–≥–∞:**
- –í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
- –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –¥–µ—Ç–∞–ª—è–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –°—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ - —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–µ–º—É
- –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –¥–µ—Ç–∞–ª—è–º–∏

**–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤:**
- –ú—è–≥–∫–æ –≤–µ–¥–∏—Ç–µ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∑–≤–æ–Ω–æ–∫, –≤—Å—Ç—Ä–µ—á—É, –∞—É–¥–∏—Ç)
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞

**–ü—Ä–∏–º–µ—Ä—ã –≤–∞—à–µ–≥–æ —Ç–æ–Ω–∞:**
‚ùå "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."
‚úÖ "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –∫–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?"

‚ùå "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 150 000 —Ä—É–±–ª–µ–π."
‚úÖ "–î–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è –ø–æ–¥–æ–π–¥–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç. –°—Ç–æ–∏–º–æ—Å—Ç—å 150-300 —Ç—ã—Å—è—á, –Ω–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–∏–¥–∞ –Ω–∞ 40% —É–∂–µ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞. –ü–æ –Ω–∞—à–µ–º—É –æ–ø—ã—Ç—É, —Ç–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ –ø–æ–ª–≥–æ–¥–∞."

–ë—É–¥—å—Ç–µ –∂–∏–≤—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ö–æ—á–µ—Ç –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞!"""

        # Model mapping (only working models)
        model_config = {
            "claude-sonnet": ("anthropic", "claude-3-7-sonnet-20250219"),
            "gpt-4o": ("openai", "gpt-4o")
        }
        
        selected_model = chat_request.model or "claude-sonnet"
        provider, model_name = model_config.get(selected_model, model_config["claude-sonnet"])
        
        # Load conversation history using SmartContext
        initial_messages = await smart_context.get_context(
            session_id=chat_request.session_id,
            db=db
        )
        
        # Create chat with history
        chat = LlmChat(
            api_key=EMERGENT_LLM_KEY,
            session_id=chat_request.session_id,
            system_message=system_prompt,
            initial_messages=initial_messages
        ).with_model(provider, model_name)
        
        user_message = UserMessage(text=chat_request.message)
        response = await chat.send_message(user_message)
        
        # Save to DB with model info
        message_record = {
            "id": str(uuid.uuid4()),
            "session_id": chat_request.session_id,
            "user_message": chat_request.message,
            "ai_response": response,
            "model": selected_model,
            "timestamp": datetime.utcnow(),
            "user_data": chat_request.user_data
        }
        await db.chat_messages.insert_one(message_record)
        
        # Notify if contact provided
        if chat_request.user_data and chat_request.user_data.get('contact'):
            telegram_message = f"""
<b>üí¨ –õ–∏–¥ –∏–∑ AI-—á–∞—Ç–∞!</b>

<b>–ú–æ–¥–µ–ª—å:</b> {selected_model}
<b>–ò–º—è:</b> {chat_request.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {chat_request.user_data.get('contact')}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {chat_request.message}
"""
            await send_telegram_notification(telegram_message)
        
        return ChatResponse(
            response=response,
            session_id=chat_request.session_id
        )
    except Exception as e:
        logger.error(f"AI chat error: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")


# Include router
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=[CLIENT_ORIGIN_URL],
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["*"],
)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()
