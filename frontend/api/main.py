from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
from motor.motor_asyncio import AsyncIOMotorClient
import google.generativeai as genai
import httpx
import os
import asyncio
from datetime import datetime
from typing import List, Optional, Dict, Any

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Config
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY") or os.getenv("GEMINI_API_KEY")
MONGODB_URI = os.getenv("MONGODB_URI") or os.getenv("MONGO_URL")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# Gemini setup —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é
if GOOGLE_API_KEY:
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel(
        'gemini-1.5-pro',
        generation_config={
            "temperature": 0.7,
            "top_p": 0.95,
            "max_output_tokens": 2048,
        },
        system_instruction="""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ù–µ–π—Ä–æ–≠–∫—Å–ø–µ—Ä—Ç. 
–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
–°—Ç–∏–ª—å: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π."""
    )

# MongoDB
db_client = None
db = None
if MONGODB_URI:
    db_client = AsyncIOMotorClient(MONGODB_URI)
    db = db_client.neuroexpert

# Models
class ChatMessage(BaseModel):
    message: str
    session_id: Optional[str] = None
    conversation_id: Optional[str] = None
    model: Optional[str] = "gemini-pro"

class ContactForm(BaseModel):
    name: str
    email: Optional[EmailStr] = None
    contact: Optional[str] = None
    message: str
    phone: Optional[str] = None
    service: Optional[str] = None

# Chat history storage (in-memory + MongoDB)
chat_sessions: Dict[str, List[str]] = {}

@app.get("/api/health")
async def health():
    health_status = {
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat(),
        "gemini_configured": bool(GOOGLE_API_KEY),
        "mongodb_configured": bool(MONGODB_URI),
        "telegram_configured": bool(TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID)
    }
    
    # Test MongoDB connection
    if db_client:
        try:
            await db_client.admin.command('ping')
            health_status["mongodb"] = "connected"
        except Exception as e:
            health_status["mongodb"] = f"error: {str(e)}"
    
    return health_status

@app.post("/api/chat")
async def chat(data: ChatMessage):
    if not GOOGLE_API_KEY:
        raise HTTPException(500, "AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    try:
        conv_id = data.conversation_id or data.session_id or "default"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
        if conv_id not in chat_sessions:
            chat_sessions[conv_id] = []
        
        history = chat_sessions[conv_id][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = "\n".join([f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if i%2==0 else '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: {msg}" 
                            for i, msg in enumerate(history)])
        
        prompt = f"{context}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.message}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:" if context else data.message
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        response = await asyncio.wait_for(
            asyncio.to_thread(model.generate_content, prompt),
            timeout=15.0
        )
        
        answer = response.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_sessions[conv_id].append(data.message)
        chat_sessions[conv_id].append(answer)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        if db:
            await db.chats.insert_one({
                "conversation_id": conv_id,
                "session_id": data.session_id,
                "user_message": data.message,
                "ai_response": answer,
                "timestamp": datetime.utcnow()
            })
        
        return {"response": answer, "conversation_id": conv_id, "session_id": data.session_id}
        
    except asyncio.TimeoutError:
        raise HTTPException(504, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ AI: {str(e)}")

@app.post("/api/contact")
async def contact(data: ContactForm):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
        if db:
            await db.contacts.insert_one({
                "name": data.name,
                "email": data.email,
                "contact": data.contact,
                "message": data.message,
                "phone": data.phone,
                "service": data.service,
                "timestamp": datetime.utcnow()
            })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
            text = f"""üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞

üë§ –ò–º—è: {data.name}
üìß Email: {data.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.phone or data.contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üéØ –£—Å–ª—É–≥–∞: {data.service or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.message}
üïê {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
            
            async with httpx.AsyncClient() as client:
                await client.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                    json={"chat_id": TELEGRAM_CHAT_ID, "text": text},
                    timeout=5.0
                )
        
        return {"success": True, "message": "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."}
        
    except Exception as e:
        # –î–∞–∂–µ –µ—Å–ª–∏ Telegram —É–ø–∞–ª, —Ñ–æ—Ä–º–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ–π
        return {"success": True, "message": "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"}
